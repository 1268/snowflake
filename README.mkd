# Snowflake

**Warning: this is alpha quality software and subject to dramatic changes until its more stable.**

Snowflake is a network service for generating unique ID numbers at high scale with some simple guarantees.

## Motivation

As we at Twitter move away from Mysql towards Cassandra, we've needed a new way to generate id numbers. There is no sequential id generation facility in Cassandra, nor should there be.

## Requirements

### Performance
 * minimum 10k ids per process
 * response rate 2ms (plus network latency)

### Uncoordinated

For high availability within and across data centers, machines generating ids should not have to coordinate with each other.

### (Roughly) Time Ordered

We have a number of API resources that assume an ordering (they let you look things up "since this id").

However, as a result of a large number of asynchronous operations, we already don't guarantee in-order delivery.

We can, however, that the id numbers will be k-sorted [TODO reference] within a reasonable bound (we're promising 1s, but shooting for 10's of ms).

### Directly Sortable

The ids should be sortable without loading the full objects that the represent. This sorting should be the above ordering.

### Compact

There are many otherwise reasonable solutions to this problem that require 128bit numbers. For various reasons, we need to keep our ids under 64bits.

### Highly Available

The id generation scheme should be at least as available as our related services (like our storage services).

##  Proposed Solution
* Thrift Server written in Scala 
* id is composed of:
  * time - 41 bits (millisecond precision w/ a custom epoch gives us 69 years)
  * configured machine id - 10 bits - gives us up to 1024 machines
  * sequence number - 12 bits - rolls over every 4096 per machine (with protection to avoid rollover in the same ms)






Current logic for id generation:

                             +-----------+
                             |  lastTS   |
                             |           |
                             |    ==     |
                             |           |
                             |  currTS   |
                             +-----------+
                             /           \
                            /             \
                 YES       /               \     NO
             +------------+                 +------------+
             |   incr.    |                 |            |
             |  sequence  |                 |   reset    |
             |    and     |                 |  sequence  |
             |  did seq.  |                 |   to 0     |
             | roll over? |                 |            |
             +------------+                 +------------+
                 /    \                           |
                /      \                          |
       YES     /        \  NO                     |
  +-------------+    +------------+               |
  |  Busy wait  |    |            |               |
  | til next ms |    |    Done.   |               |
  |    and      |    |            |               |
  |   reset     |    |            |               |
  |   currTS    |    |            |               |
  +-------------+    +------------+               |
               \             \             +------------+
                 \             \           |            |
                   \             \         |  Compute   |
                     \             \_______|    id      |
                       \                   |            |
                         \________________ |            |
                                           +------------+
